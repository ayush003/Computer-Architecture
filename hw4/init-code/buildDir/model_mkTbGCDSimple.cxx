/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sun Apr 15 19:53:33 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbGCDSimple.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbGCDSimple::MODEL_mkTbGCDSimple()
{
  mkTbGCDSimple_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbGCDSimple()
{
  MODEL_mkTbGCDSimple *model = new MODEL_mkTbGCDSimple();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbGCDSimple &INST_top = *((MOD_mkTbGCDSimple *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_gcd_bz___d13;
	 tUInt8 DEF_INST_top_DEF_gcd_bz__h459;
	 tUInt32 DEF_INST_top_DEF_b__h322;
	 DEF_INST_top_DEF_b__h322 = INST_top.INST_state.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_exit = DEF_INST_top_DEF_b__h322 == 2u;
	 INST_top.DEF_WILL_FIRE_RL_exit = INST_top.DEF_CAN_FIRE_RL_exit;
	 DEF_INST_top_DEF_gcd_bz__h459 = INST_top.INST_gcd_bz.METH_read();
	 DEF_INST_top_DEF_NOT_gcd_bz___d13 = !DEF_INST_top_DEF_gcd_bz__h459;
	 INST_top.DEF_CAN_FIRE_RL_finish = DEF_INST_top_DEF_NOT_gcd_bz___d13 && DEF_INST_top_DEF_b__h322 == 1u;
	 INST_top.DEF_WILL_FIRE_RL_finish = INST_top.DEF_CAN_FIRE_RL_finish;
	 INST_top.DEF_gcd_y___d2 = INST_top.INST_gcd_y.METH_read();
	 INST_top.DEF_b__h194 = INST_top.INST_gcd_x.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_gcd_subtract = !primSLT8(1u,
							   32u,
							   (tUInt32)(INST_top.DEF_gcd_y___d2),
							   32u,
							   (tUInt32)(INST_top.DEF_b__h194)) && DEF_INST_top_DEF_gcd_bz__h459;
	 INST_top.DEF_WILL_FIRE_RL_gcd_subtract = INST_top.DEF_CAN_FIRE_RL_gcd_subtract;
	 INST_top.DEF_CAN_FIRE_RL_go = DEF_INST_top_DEF_NOT_gcd_bz___d13 && DEF_INST_top_DEF_b__h322 == 0u;
	 INST_top.DEF_WILL_FIRE_RL_go = INST_top.DEF_CAN_FIRE_RL_go;
	 INST_top.DEF_CAN_FIRE_RL_gcd_swapANDsub = !primSLE8(1u,
							     32u,
							     (tUInt32)(INST_top.DEF_b__h194),
							     32u,
							     (tUInt32)(INST_top.DEF_gcd_y___d2)) && DEF_INST_top_DEF_gcd_bz__h459;
	 INST_top.DEF_WILL_FIRE_RL_gcd_swapANDsub = INST_top.DEF_CAN_FIRE_RL_gcd_swapANDsub;
	 INST_top.DEF_CAN_FIRE_RL_gcd_stop = (INST_top.DEF_b__h194) == 0u;
	 INST_top.DEF_WILL_FIRE_RL_gcd_stop = (INST_top.DEF_CAN_FIRE_RL_gcd_stop && !(INST_top.DEF_WILL_FIRE_RL_gcd_swapANDsub)) && !(INST_top.DEF_WILL_FIRE_RL_go);
	 if (INST_top.DEF_WILL_FIRE_RL_exit)
	   INST_top.RL_exit();
	 if (INST_top.DEF_WILL_FIRE_RL_finish)
	   INST_top.RL_finish();
	 if (INST_top.DEF_WILL_FIRE_RL_gcd_subtract)
	   INST_top.RL_gcd_subtract();
	 if (INST_top.DEF_WILL_FIRE_RL_gcd_stop)
	   INST_top.RL_gcd_stop();
	 if (INST_top.DEF_WILL_FIRE_RL_gcd_swapANDsub)
	   INST_top.RL_gcd_swapANDsub();
	 if (INST_top.DEF_WILL_FIRE_RL_go)
	   INST_top.RL_go();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd_x.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd_y.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd_bz.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbGCDSimple::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbGCDSimple_instance = new MOD_mkTbGCDSimple(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbGCDSimple_instance->set_clk_0)("CLK");
}
void MODEL_mkTbGCDSimple::destroy_model()
{
  delete mkTbGCDSimple_instance;
  mkTbGCDSimple_instance = NULL;
}
void MODEL_mkTbGCDSimple::reset_model(bool asserted)
{
  (mkTbGCDSimple_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbGCDSimple::get_instance()
{
  return mkTbGCDSimple_instance;
}

/* Fill in version numbers */
void MODEL_mkTbGCDSimple::get_version(unsigned int *year,
				      unsigned int *month,
				      char const **annotation,
				      char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mkTbGCDSimple::get_creation_time()
{
  
  /* Sun Apr 15 14:23:33 UTC 2018 */
  return 1523802213llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTbGCDSimple::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTbGCDSimple::dump_state()
{
  (mkTbGCDSimple_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbGCDSimple & mkTbGCDSimple_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbGCDSimple *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbGCDSimple(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbGCDSimple::dump_VCD_defs()
{
  (mkTbGCDSimple_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbGCDSimple::dump_VCD(tVCDDumpType dt)
{
  (mkTbGCDSimple_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTbGCDSimple_backing(sim_hdl));
}
