/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sun Apr 15 19:53:33 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbGCDSimple.h"


/* String declarations */
static std::string const __str_literal_1("GCD of 423 and 142 =%d", 22u);


/* Constructor */
MOD_mkTbGCDSimple::MOD_mkTbGCDSimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_gcd_bz(simHdl, "gcd_bz", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_x(simHdl, "gcd_x", this, 32u, 0u, (tUInt8)0u),
    INST_gcd_y(simHdl, "gcd_y", this, 32u, 0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 23u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbGCDSimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h194", SYM_DEF, &DEF_b__h194, 32u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_exit", SYM_DEF, &DEF_CAN_FIRE_RL_exit, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_finish", SYM_DEF, &DEF_CAN_FIRE_RL_finish, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_gcd_stop", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_gcd_subtract", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_subtract, 1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_gcd_swapANDsub",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_gcd_swapANDsub,
	      1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_go", SYM_DEF, &DEF_CAN_FIRE_RL_go, 1u);
  init_symbol(&symbols[7u], "gcd_bz", SYM_MODULE, &INST_gcd_bz);
  init_symbol(&symbols[8u], "gcd_x", SYM_MODULE, &INST_gcd_x);
  init_symbol(&symbols[9u], "gcd_y", SYM_MODULE, &INST_gcd_y);
  init_symbol(&symbols[10u], "RL_exit", SYM_RULE);
  init_symbol(&symbols[11u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[12u], "RL_gcd_stop", SYM_RULE);
  init_symbol(&symbols[13u], "RL_gcd_subtract", SYM_RULE);
  init_symbol(&symbols[14u], "RL_gcd_swapANDsub", SYM_RULE);
  init_symbol(&symbols[15u], "RL_go", SYM_RULE);
  init_symbol(&symbols[16u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[17u], "WILL_FIRE_RL_exit", SYM_DEF, &DEF_WILL_FIRE_RL_exit, 1u);
  init_symbol(&symbols[18u], "WILL_FIRE_RL_finish", SYM_DEF, &DEF_WILL_FIRE_RL_finish, 1u);
  init_symbol(&symbols[19u], "WILL_FIRE_RL_gcd_stop", SYM_DEF, &DEF_WILL_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[20u],
	      "WILL_FIRE_RL_gcd_subtract",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_gcd_subtract,
	      1u);
  init_symbol(&symbols[21u],
	      "WILL_FIRE_RL_gcd_swapANDsub",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_gcd_swapANDsub,
	      1u);
  init_symbol(&symbols[22u], "WILL_FIRE_RL_go", SYM_DEF, &DEF_WILL_FIRE_RL_go, 1u);
}


/* Rule actions */

void MOD_mkTbGCDSimple::RL_gcd_swapANDsub()
{
  tUInt32 DEF_gcd_x_MINUS_gcd_y___d7;
  DEF_gcd_y___d2 = INST_gcd_y.METH_read();
  DEF_b__h194 = INST_gcd_x.METH_read();
  DEF_gcd_x_MINUS_gcd_y___d7 = DEF_b__h194 - DEF_gcd_y___d2;
  INST_gcd_x.METH_write(DEF_gcd_y___d2);
  INST_gcd_y.METH_write(DEF_gcd_x_MINUS_gcd_y___d7);
}

void MOD_mkTbGCDSimple::RL_gcd_subtract()
{
  tUInt32 DEF_gcd_y_MINUS_gcd_x___d11;
  DEF_gcd_y___d2 = INST_gcd_y.METH_read();
  DEF_b__h194 = INST_gcd_x.METH_read();
  DEF_gcd_y_MINUS_gcd_x___d11 = DEF_gcd_y___d2 - DEF_b__h194;
  INST_gcd_y.METH_write(DEF_gcd_y_MINUS_gcd_x___d11);
}

void MOD_mkTbGCDSimple::RL_gcd_stop()
{
  INST_gcd_bz.METH_write((tUInt8)0u);
}

void MOD_mkTbGCDSimple::RL_go()
{
  INST_gcd_x.METH_write(423u);
  INST_gcd_y.METH_write(142u);
  INST_gcd_bz.METH_write((tUInt8)1u);
  INST_state.METH_write(1u);
}

void MOD_mkTbGCDSimple::RL_finish()
{
  tUInt32 DEF_signed_gcd_y___d19;
  DEF_gcd_y___d2 = INST_gcd_y.METH_read();
  DEF_signed_gcd_y___d19 = DEF_gcd_y___d2;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_gcd_y___d19);
  INST_state.METH_write(2u);
}

void MOD_mkTbGCDSimple::RL_exit()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkTbGCDSimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_gcd_y.reset_RST(ARG_rst_in);
  INST_gcd_x.reset_RST(ARG_rst_in);
  INST_gcd_bz.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbGCDSimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbGCDSimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_gcd_bz.dump_state(indent + 2u);
  INST_gcd_x.dump_state(indent + 2u);
  INST_gcd_y.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbGCDSimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 19u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_exit", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_swapANDsub", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_go", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_exit", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_swapANDsub", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_go", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h194", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcd_y___d2", 32u);
  num = INST_gcd_bz.dump_VCD_defs(num);
  num = INST_gcd_x.dump_VCD_defs(num);
  num = INST_gcd_y.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbGCDSimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbGCDSimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbGCDSimple::vcd_defs(tVCDDumpType dt, MOD_mkTbGCDSimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_exit) != DEF_CAN_FIRE_RL_exit)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_exit, 1u);
	backing.DEF_CAN_FIRE_RL_exit = DEF_CAN_FIRE_RL_exit;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_finish) != DEF_CAN_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_finish, 1u);
	backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_stop) != DEF_CAN_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_stop, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_subtract) != DEF_CAN_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_swapANDsub) != DEF_CAN_FIRE_RL_gcd_swapANDsub)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_swapANDsub, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_swapANDsub = DEF_CAN_FIRE_RL_gcd_swapANDsub;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_go) != DEF_CAN_FIRE_RL_go)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_go, 1u);
	backing.DEF_CAN_FIRE_RL_go = DEF_CAN_FIRE_RL_go;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_exit) != DEF_WILL_FIRE_RL_exit)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_exit, 1u);
	backing.DEF_WILL_FIRE_RL_exit = DEF_WILL_FIRE_RL_exit;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_finish) != DEF_WILL_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_finish, 1u);
	backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_stop) != DEF_WILL_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_stop, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_subtract) != DEF_WILL_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_swapANDsub) != DEF_WILL_FIRE_RL_gcd_swapANDsub)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_swapANDsub, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_swapANDsub = DEF_WILL_FIRE_RL_gcd_swapANDsub;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_go) != DEF_WILL_FIRE_RL_go)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_go, 1u);
	backing.DEF_WILL_FIRE_RL_go = DEF_WILL_FIRE_RL_go;
      }
      ++num;
      if ((backing.DEF_b__h194) != DEF_b__h194)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h194, 32u);
	backing.DEF_b__h194 = DEF_b__h194;
      }
      ++num;
      if ((backing.DEF_gcd_y___d2) != DEF_gcd_y___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_gcd_y___d2, 32u);
	backing.DEF_gcd_y___d2 = DEF_gcd_y___d2;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_exit, 1u);
      backing.DEF_CAN_FIRE_RL_exit = DEF_CAN_FIRE_RL_exit;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_finish, 1u);
      backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_stop, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_swapANDsub, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_swapANDsub = DEF_CAN_FIRE_RL_gcd_swapANDsub;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_go, 1u);
      backing.DEF_CAN_FIRE_RL_go = DEF_CAN_FIRE_RL_go;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_exit, 1u);
      backing.DEF_WILL_FIRE_RL_exit = DEF_WILL_FIRE_RL_exit;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_finish, 1u);
      backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_stop, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_swapANDsub, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_swapANDsub = DEF_WILL_FIRE_RL_gcd_swapANDsub;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_go, 1u);
      backing.DEF_WILL_FIRE_RL_go = DEF_WILL_FIRE_RL_go;
      vcd_write_val(sim_hdl, num++, DEF_b__h194, 32u);
      backing.DEF_b__h194 = DEF_b__h194;
      vcd_write_val(sim_hdl, num++, DEF_gcd_y___d2, 32u);
      backing.DEF_gcd_y___d2 = DEF_gcd_y___d2;
    }
}

void MOD_mkTbGCDSimple::vcd_prims(tVCDDumpType dt, MOD_mkTbGCDSimple &backing)
{
  INST_gcd_bz.dump_VCD(dt, backing.INST_gcd_bz);
  INST_gcd_x.dump_VCD(dt, backing.INST_gcd_x);
  INST_gcd_y.dump_VCD(dt, backing.INST_gcd_y);
  INST_state.dump_VCD(dt, backing.INST_state);
}
