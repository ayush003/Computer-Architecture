/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sun Apr 15 19:30:17 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbAdd4Simple.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbAdd4Simple::MODEL_mkTbAdd4Simple()
{
  mkTbAdd4Simple_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbAdd4Simple()
{
  MODEL_mkTbAdd4Simple *model = new MODEL_mkTbAdd4Simple();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbAdd4Simple &INST_top = *((MOD_mkTbAdd4Simple *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test = DEF_INST_top_DEF_CAN_FIRE_RL_test;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test)
	   INST_top.RL_test();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_cycle.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbAdd4Simple::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbAdd4Simple_instance = new MOD_mkTbAdd4Simple(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbAdd4Simple_instance->set_clk_0)("CLK");
}
void MODEL_mkTbAdd4Simple::destroy_model()
{
  delete mkTbAdd4Simple_instance;
  mkTbAdd4Simple_instance = NULL;
}
void MODEL_mkTbAdd4Simple::reset_model(bool asserted)
{
  (mkTbAdd4Simple_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbAdd4Simple::get_instance()
{
  return mkTbAdd4Simple_instance;
}

/* Fill in version numbers */
void MODEL_mkTbAdd4Simple::get_version(unsigned int *year,
				       unsigned int *month,
				       char const **annotation,
				       char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mkTbAdd4Simple::get_creation_time()
{
  
  /* Sun Apr 15 14:00:17 UTC 2018 */
  return 1523800817llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTbAdd4Simple::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTbAdd4Simple::dump_state()
{
  (mkTbAdd4Simple_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbAdd4Simple & mkTbAdd4Simple_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbAdd4Simple *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbAdd4Simple(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbAdd4Simple::dump_VCD_defs()
{
  (mkTbAdd4Simple_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbAdd4Simple::dump_VCD(tVCDDumpType dt)
{
  (mkTbAdd4Simple_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTbAdd4Simple_backing(sim_hdl));
}
